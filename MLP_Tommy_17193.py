# -*- coding: utf-8 -*-
"""SLP-Tommy-17193.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PTKwFMgT1GflyXufVGwByokvSZvElyQA
"""



import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import io

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv("/content/drive/My Drive/Colab Notebooks/data_iris_2.csv")
df = df.sample(frac=1)
df

def SumBobot (ciri,bobot,bias):
    sum_bobot = np.dot(ciri, bobot) + bias
    return sum_bobot
  
def Aktivasi (sum_bobot):
    aktivasi = 1/(1+np.exp(-sum_bobot))
    return aktivasi
  
def Prediksi (aktivasi):
    if aktivasi > 0.5:
      return 1 
    else: return 0
  
def Error (aktivasi,tipe):
    return 0.5*((tipe-aktivasi)*(tipe-aktivasi))
  
def Dtheta (ciri,aktivasi,tipe):
    dtheta = []
    for x in range(len(ciri)):
      dtheta.append(ciri[x]*(tipe-aktivasi)*(1-aktivasi)*aktivasi)
    dtheta.append((tipe-aktivasi)*(1-aktivasi)*aktivasi)
    return dtheta
  
def DthetaHidden (ciri,aktivasi,hidden):
    dtheta = []
    for x in range(len(ciri)):
      dtheta.append(ciri[x]*hidden*(1-aktivasi)*aktivasi)
    dtheta.append(hidden*(1-aktivasi)*aktivasi)
    return dtheta
  
def UpdateBobot (dtheta,bobot):
    for x in range(len(dtheta)-1):
      bobot[x] = bobot[x]+(0.1*dtheta[x])
    return bobot
  
def UpdateBias (dtheta,bias):
    return bias+(0.1*dtheta[len(dtheta)-1])
  

def Validasi(range1,range2,bobot_z1,bobot_z2,bobot_o1,bobot_o2,bias):
    ciri = df.loc[range1,"x1":"x4"]
    tipe = df.loc[range1,"target 1"]
    tipe2 = df.loc[range1,"target 2"]
    aktivasi_o1 = 0
    aktivasi_o2 = 0
    aktivasi = 0
    sum_akurasi = 0
    for x in range (range1,range2):
      aktivasi_z1 = Aktivasi(SumBobot(ciri,bobot_z1,bias[0]))
      aktivasi_z2 = Aktivasi(SumBobot(ciri,bobot_z2,bias[1]))

      aktivasi_o1 = Aktivasi(SumBobot([aktivasi_z1,aktivasi_z2],bobot_o1,bias[2]))
      aktivasi_o2 = Aktivasi(SumBobot([aktivasi_z1,aktivasi_z2],bobot_o2,bias[3]))
        
        #         Penjumlahan Akurasi
      if Prediksi(aktivasi_o1) == tipe and Prediksi(aktivasi_o2) == tipe2:
        sum_akurasi = sum_akurasi + 1
      tipe = df.loc[x+1,"target 1"]
      tipe2 = df.loc[x+1,"target 2"]
      ciri = df.loc[x+1,"x1":"x4"]
    tipe = df.loc[range2,"target 1"]
    tipe2 = df.loc[range2,"target 2"]
    error = Error(aktivasi_o1,tipe)+Error(aktivasi_o2,tipe2)
    akurasi = sum_akurasi/30
    Pair = [error,akurasi]
    return Pair

def MLP():
    pos = 0
    ciri = df.loc[pos,"x1":"x4"]
    tipe = df.loc[pos,"target 1"]
    tipe2 = df.loc[pos,"target 2"]
    bobot_z1 = [0.5,0.5,0.5,0.5]
    bobot_z2 = [0.5,0.5,0.5,0.5]
    bobot_o1 = [0.5,0.5]
    bobot_o2 = [0.5,0.5]
    bias = [0.5,0.5,0,5,0,5]
    PlotError_T = []
    Akurasi_T = []
    PlotError_V = []
    Akurasi_V = []
    validate = []
    
    for epoch in range (300):
      sum_akurasi = 0
      aktivasi_z1 = 0
      aktivasi_z2 = 0
      aktivasi_o1 = 0
      aktivasi_o2 = 0
      for x in range (0,119):
        aktivasi_z1 = Aktivasi(SumBobot(ciri,bobot_z1,bias[0]))
        aktivasi_z2 = Aktivasi(SumBobot(ciri,bobot_z2,bias[1]))
 
        aktivasi_o1 = Aktivasi(SumBobot([aktivasi_z1,aktivasi_z2],bobot_o1,bias[2]))
        aktivasi_o2 = Aktivasi(SumBobot([aktivasi_z1,aktivasi_z2],bobot_o2,bias[3]))
        
        #         Penjumlahan Akurasi
        if Prediksi(aktivasi_o1) == tipe and Prediksi(aktivasi_o2) == tipe2:
          sum_akurasi = sum_akurasi + 1
        
        dtheta_o1 = Dtheta([aktivasi_z1,aktivasi_z2], aktivasi_o1,tipe)
        dtheta_o2 = Dtheta([aktivasi_z1,aktivasi_z2], aktivasi_o2,tipe2)
        
        z1 = (dtheta_o1[0]/aktivasi_z1*bobot_o1[0])+ (dtheta_o2[0]/aktivasi_z1*bobot_o2[0])
        z2 = (dtheta_o1[0]/aktivasi_z1*bobot_o1[1])+ (dtheta_o2[0]/aktivasi_z1*bobot_o2[1])
        
        dtheta_z1 = DthetaHidden(ciri,aktivasi_z1,z1)
        dtheta_z2 = DthetaHidden(ciri,aktivasi_z2,z2)
        
        bobot_o1 = UpdateBobot(dtheta_o1,bobot_o1)
        bias[2] = UpdateBias(dtheta_o1,bias[2])
        bobot_o2 = UpdateBobot(dtheta_o2,bobot_o2)
        bias[3] = UpdateBias(dtheta_o2,bias[3]) 
        
        bobot_z1 = UpdateBobot(dtheta_z1,bobot_z1)
        bias[0] = UpdateBias(dtheta_z1,bias[0])
        bobot_z2 = UpdateBobot(dtheta_z2,bobot_z2)
        bias[1] = UpdateBias(dtheta_z2,bias[1])
        
        tipe = df.loc[x+1,"target 1"]
        tipe2 = df.loc[x+1,"target 2"]
        ciri = df.loc[x+1,"x1":"x4"]
      tipe = df.loc[119,"target 1"]
      tipe2 = df.loc[119,"target 2"]
      PlotError_T.append(Error(aktivasi_o1,tipe)+Error(aktivasi_o2,tipe2))
      Akurasi_T.append(sum_akurasi/120)
      validate = Validasi(120,149,bobot_z1,bobot_z2,bobot_o1,bobot_o2,bias)
      PlotError_V.append(validate[0])
      Akurasi_V.append(validate[1])
    Pair = [PlotError_T,Akurasi_T,PlotError_V,Akurasi_V]
    return Pair

MLP = MLP()
MLP

# Hasil Loss Function Split
plt.plot(MLP[0],label="Data Training")
plt.plot(MLP[2],label="Data Validasi")
plt.ylabel('Loss Function')
plt.xlabel('Epoch')
plt.legend()

# Hasil Akurasi split
plt.plot(MLP[1],label="Data Training")
plt.plot(MLP[3],label="Data Validasi")
plt.ylabel('Akurasi')
plt.xlabel('Epoch')
plt.legend()

MLP[3]

